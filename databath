library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity databath is
port (clk , reset : in std_logic;
      RegSrc: in STD_LOGIC_VECTOR(1 downto 0);
      WE3: in STD_LOGIC;
      ImmSrc: in STD_LOGIC_VECTOR(1 downto 0);
      ALUSrc: in STD_LOGIC;
      ALUControl: in STD_LOGIC_VECTOR(1 downto 0);
      MemtoReg: in STD_LOGIC;
      PCSrc: in STD_LOGIC;
      --ALUFlags: out STD_LOGIC_VECTOR(3 downto 0);
      N,Z,C,V: out std_logic;
      PC: buffer STD_LOGIC_VECTOR(31 downto 0);
      Instr: in STD_LOGIC_VECTOR(31 downto 0);
      ALUResult, WriteData:buffer STD_LOGIC_VECTOR(31 downto 0);
      ReadData: in STD_LOGIC_VECTOR(31 downto 0));
end;

architecture struct of databath is
component ALU
port(A: in std_logic_vector (31 downto 0);
     B: in std_logic_vector (31 downto 0);
     CTR: in std_logic_vector (1 downto 0);
     Result: out std_logic_vector (31 downto 0);
     N,Z,C,V: out std_logic);
end component;
component registerfile 
port( clk ,WE3 : in  std_logic;
      A1,A2,A3 : in  std_logic_vector (3  downto 0);
      RD1,RD2  : out std_logic_vector (31 downto 0);
      WD3      : in  std_logic_vector (31 downto 0);
      R15      : in  std_logic_vector (31 downto 0));
end component; 
component adder
port(a, b: in STD_LOGIC_VECTOR(31 downto 0);
y: out STD_LOGIC_VECTOR(31 downto 0));
end component;
component extend 
port(Instr: in STD_LOGIC_VECTOR(23 downto 0);
ImmSrc: in STD_LOGIC_VECTOR(1 downto 0);
ExtImm: out STD_LOGIC_VECTOR(31 downto 0));
end component;
component flopr generic(width: integer);
port(clk, reset: in STD_LOGIC;
d: in STD_LOGIC_VECTOR(width-1 downto 0);
q: out STD_LOGIC_VECTOR(width-1 downto 0));
end component;
component mux2_1 generic(width:integer);
	port(d0,d1: in std_logic_vector(width-1 downto 0);
		s: in std_logic;
		y: out std_logic_vector(width-1 downto 0));
end component;
signal PCNext, PCPlus4, PCPlus8: STD_LOGIC_VECTOR(31 downto 0);
signal ExtImm, Result: STD_LOGIC_VECTOR(31 downto 0);
signal SrcA, SrcB: STD_LOGIC_VECTOR(31 downto 0);
signal RA1, RA2: STD_LOGIC_VECTOR(3 downto 0);
begin
pcmux : mux2_1 generic map(32) port map (PCPlus4,Result,PCSrc,PCNext); 
pcreg: flopr generic map(32) port map(clk, reset, PCNext, PC);
pcadd1: adder port map(PC, X"00000004", PCPlus4);
pcadd2: adder port map(PCPlus4, X"00000004", PCPlus8);
-- register file logic
ra1mux: mux2_1 generic map (4) port map(Instr(19 downto 16), "1111", RegSrc(0), RA1);
ra2mux: mux2_1 generic map (4) port map(Instr(3 downto 0),Instr(15 downto 12), RegSrc(1), RA2);
rf: registerfile port map(clk, WE3, RA1, RA2,Instr(15 downto 12),SrcA,SrcB, Result,PCPlus8);
resmux: mux2_1 generic map(32)port map(ALUResult, ReadData, MemtoReg, Result);
ext: extend port map(Instr(23 downto 0), ImmSrc, ExtImm);
-- ALU logic
srcbmux: mux2_1 generic map(32) port map(WriteData, ExtImm, ALUSrc, SrcB);
i_alu: ALU port map(SrcA, SrcB, ALUControl, ALUResult, N,Z,C,V);
end;

      
