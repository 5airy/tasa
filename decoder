library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity decoder is
port(Op: in std_logic_vector(1 downto 0);
     Funct: in std_logic_vector(5 downto 0);
     Rd: in std_logic_vector(3 downto 0);
     PCS,RegW,MemW,MemtoReg,ALUSrc: out std_logic;
     FlagW,ImmSrc,RegSrc,ALUCTR:out std_logic_vector(1 downto 0));
end entity;

architecture rtl of decoder is --Main decoder
signal op2: std_logic_vector(3 downto 0);
signal controls: std_logic_vector(9 downto 0);
signal Branch,ALUOp,RegW_temp: std_logic;
signal ALUCTR_temp: std_logic_vector(1 downto 0);
begin
op2<=(Op(1),Op(0),Funct(5),Funct(0));
process (Op,Funct,Rd)
begin
case(op2) is
 when "000-" => controls <="0000001001";
 when "001-" => controls <="0000101001";
 when "01-0" => controls <="1001110100";
 when "01-1" => controls <="0001111000";
 when "10--" => controls <="0110100010";
 when others => controls <="----------";
end case;
end process;
(RegSrc(1),RegSrc(0),ImmSrc(1),ImmSrc(0),ALUSrc,MemtoReg,RegW,MemW,Branch,ALUOp)<=controls;
process (Op,Funct,Rd,ALUOp,controls) ---ALU Decoder
begin
if (ALUOp='1') then
 case Funct(4 downto 1) is
 when "0100" => ALUCTR_temp <="00"; --ADD
 when "0010" => ALUCTR_temp <="01"; --SUB
 when "0000" => ALUCTR_temp <="10"; --AND
 when "1100" => ALUCTR_temp <="11"; --ORR
 when others => ALUCTR_temp <="--"; --Unimplmented
end case;
FlagW(1)<=Funct(0);
FlagW(0)<=Funct(0) and (not ALUCTR_temp(1));
else
ALUCTR_temp<="00";
FlagW<="00";
end if;
end process;
ALUCTR<=ALUCTR_temp;
RegW<=RegW_temp;
PCS<=(Rd(0) and RegW_temp) or Branch; --- HABDA, I will ask the doctor---
end rtl;
